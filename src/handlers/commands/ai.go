package commands

import (
	"fmt"
	"gobrev/src/models"
	"gobrev/src/utils"
	"strings"

	"gopkg.in/telebot.v3"
)

// AICommand handles AI interactions
type AICommand struct {
	*BaseCommand
	aiClient         *utils.AIClient
	historyManager   *models.UserHistoryManager
	messageIDManager *models.MessageIDManager
	messageSplitter  *utils.MessageSplitter
}

// NewAICommand creates a new AI command
func NewAICommand(historyManager *models.UserHistoryManager, messageIDManager *models.MessageIDManager) (*AICommand, error) {
	aiClient, err := utils.NewAIClient()
	if err != nil {
		return nil, err
	}

	return &AICommand{
		BaseCommand:      NewBaseCommand(".–∏–∏", false),
		aiClient:         aiClient,
		historyManager:   historyManager,
		messageIDManager: messageIDManager,
		messageSplitter:  utils.NewMessageSplitter(),
	}, nil
}

// Execute executes the AI command
func (cmd *AICommand) Execute(c telebot.Context, metrics *models.Metrics) error {
	metrics.RecordCommand()

	// Get user message (use full text since we're triggered by "–±—Ä–µ–≤")
	userMessage := c.Text()
	userMessage = strings.TrimSpace(userMessage)

	if userMessage == "" {
		return c.Send("ü§ñ <b>–ë—Ä–µ–≤</b>\n\n<i>–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–æ —Å–ª–æ–≤–æ–º '–±—Ä–µ–≤'</i>\n\n<b>–ü—Ä–∏–º–µ—Ä:</b> <code>–ø—Ä–∏–≤–µ—Ç –±—Ä–µ–≤ –∫–∞–∫ –¥–µ–ª–∞?</code>", &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}

	// Send "thinking" message as reply to original message
	thinkingMsg, err := c.Bot().Send(c.Chat(), "‚ö°Ô∏è", &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
		ReplyTo:   c.Message(),
	})
	if err != nil {
		return fmt.Errorf("failed to send thinking message: %w", err)
	}

	// Get user ID for history management
	userID := c.Sender().ID

	// Add user message to history
	cmd.historyManager.AddUserMessage(userID, "user", userMessage)

	// Get user's conversation history
	userHistory := cmd.historyManager.GetUserMessages(userID)

	// Create AI conversation with system message and user history
	messages := []utils.ChatMessage{
		{Role: "system", Content: `–¢—ã - –¥–µ–≤—É—à–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –ë—Ä–µ–≤ –∏–∑ Telegram.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫ –≤ Telegram.
–Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π.
–î–ª–∏–Ω–∞: –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.
–°—Ç–∏–ª—å: –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –∂–∏–≤–æ–π —Ç–æ–Ω (–Ω–µ –ò–ò-—Å—Ç–∏–ª—å).
–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –ü–æ–Ω—è—Ç–Ω—ã–µ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º—ã—Å–ª–∏.
–ó–∞–ø—Ä–µ—â–µ–Ω–æ: –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (.!?), —ç–º–æ–¥–∑–∏, —Ç–∏—Ä–µ, TL;DR (—Ç–æ–ª—å–∫–æ "," —Ä–∞–∑—Ä–µ—à–µ–Ω–∞)
–¢—ã: —á–µ–ª–æ–≤–µ–∫, –∂–µ–Ω—â–∏–Ω–∞
–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –æ—Ç–≤–µ—Ç–∞–º:
- –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ
- –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏–ª –±—ã —á–µ–ª–æ–≤–µ–∫ (–¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å 18+ –∫–æ–Ω—Ç–µ–Ω—Ç)
- –æ–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
- —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π, –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
- —É–±–µ–¥–∏—Å—å —á—Ç–æ –æ—Ç–≤–µ—Ç –∑–≤—É—á–∏—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
- –∏–∑–±–µ–≥–∞–π –∫–ª–∏—à–µ –∏ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
- –¥–µ–ª–∞–π —Å–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è —è—Å–Ω–æ–π –∏ –ø—Ä—è–º–æ–π
- –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ –±–æ—Ç`},
	}

	// Add conversation history (excluding the last user message which we already added)
	for _, msg := range userHistory {
		if msg.Role == "user" && msg.Content == userMessage {
			continue // Skip the current message as it's already added above
		}
		messages = append(messages, utils.ChatMessage{
			Role:    msg.Role,
			Content: msg.Content,
		})
	}

	// Add current user message
	messages = append(messages, utils.ChatMessage{
		Role:    "user",
		Content: userMessage,
	})

	// Get AI response with debug logging
	fmt.Printf("[i] Sending AI request: %s\n", userMessage)
	response, err := cmd.aiClient.Chat(messages,
		utils.WithTemperature(1),
		utils.WithMaxTokens(900),
	)
	if err != nil {
		fmt.Printf("[-] AI request failed: %v\n", err)
		// Edit thinking message with error
		_, editErr := c.Bot().Edit(thinkingMsg, "‚ùå <b>–û—à–∏–±–∫–∞ –ò–ò:</b> <code>"+err.Error()+"</code>", &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
		return editErr
	}

	fmt.Printf("[+] AI response received: %d choices\n", len(response.Choices))

	if len(response.Choices) == 0 {
		_, editErr := c.Bot().Edit(thinkingMsg, "‚ùå <b>–ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª</b>", &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
		return editErr
	}

	aiResponse := response.Choices[0].Message.Content

	// Add AI response to user's history
	cmd.historyManager.AddUserMessage(userID, "assistant", aiResponse)

	// Clean HTML entities that might cause parsing issues
	aiResponse = strings.ReplaceAll(aiResponse, "<", "&lt;")
	aiResponse = strings.ReplaceAll(aiResponse, ">", "&gt;")
	aiResponse = strings.ReplaceAll(aiResponse, "&", "&amp;")

	// Get usage stats
	promptTokens, completionTokens, totalTokens := cmd.aiClient.GetUsageStats(response)

	// Format response with usage info
	formattedResponse := fmt.Sprintf(`%s

<code> ‚õìÔ∏è‚Äçüí• –¢–æ–∫–µ–Ω—ã: %d ‚Üí %d (%d)</code>`,
		aiResponse, promptTokens, completionTokens, totalTokens)

	// Check message length and handle accordingly
	isValid, length := cmd.messageSplitter.ValidateMessageLength(formattedResponse)
	fmt.Printf("[i] Sending final response, length: %d chars\n", length)
	
	var editedMsg *telebot.Message
	var editErr error
	
	if isValid {
		// Message is short enough, edit directly
		editedMsg, editErr = c.Bot().Edit(thinkingMsg, formattedResponse, &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	} else {
		// Message is too long, use the splitter
		fmt.Printf("[-] Message too long (%d chars), using splitter\n", length)
		editErr = cmd.messageSplitter.EditLongMessage(c.Bot(), thinkingMsg, formattedResponse, &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
		editedMsg = thinkingMsg // Keep reference to original message
	}
	
	if editErr != nil {
		return editErr
	}

	// Store message ID for AI response
	if editedMsg != nil {
		err := cmd.messageIDManager.StoreMessageID(
			editedMsg.ID,
			c.Sender().ID,
			c.Chat().ID,
			aiResponse,
		)
		if err != nil {
			fmt.Printf("[-] Failed to store message ID: %v\n", err)
			// Don't return error, just log it
		} else {
			fmt.Printf("[+] Stored AI message ID: %d\n", editedMsg.ID)
		}
	}

	return nil
}
